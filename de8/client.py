# ================================================
# ‚úÖ ·ª®ng d·ª•ng g·ª≠i CV an to√†n s·ª≠ d·ª•ng Streamlit
# ================================================

# Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import streamlit as st  # Giao di·ªán ng∆∞·ªùi d√πng
import socket  # K·∫øt n·ªëi m·∫°ng TCP/IP
import json  # M√£ h√≥a v√† gi·∫£i m√£ d·ªØ li·ªáu d·∫°ng JSON
import base64  # M√£ h√≥a nh·ªã ph√¢n sang text
import os  # Ki·ªÉm tra v√† thao t√°c v·ªõi file h·ªá th·ªëng
from datetime import datetime  # L·∫•y th·ªùi gian hi·ªán t·∫°i
from Crypto.Cipher import AES, PKCS1_OAEP  # Th∆∞ vi·ªán m√£ h√≥a AES v√† RSA-OAEP
from Crypto.PublicKey import RSA  # T·∫°o kh√≥a RSA
from Crypto.Hash import SHA512  # BƒÉm SHA-512
from Crypto.Signature import pkcs1_15  # K√Ω s·ªë RSA
from Crypto.Random import get_random_bytes  # T·∫°o chu·ªói ng·∫´u nhi√™n
import pickle  # Tu·∫ßn t·ª± h√≥a d·ªØ li·ªáu ƒë·ªÉ g·ª≠i ƒëi qua m·∫°ng

# ==== T·∫°o ho·∫∑c ƒë·ªçc kh√≥a RSA c·ªßa client (1024-bit) ====
def generate_or_load_keys():
    if not os.path.exists("client_private_key.pem"):  # N·∫øu ch∆∞a c√≥ kh√≥a th√¨ t·∫°o
        key = RSA.generate(1024)
        with open("client_private_key.pem", "wb") as f:
            f.write(key.export_key())  # Ghi kh√≥a ri√™ng
        with open("client_public_key.pem", "wb") as f:
            f.write(key.publickey().export_key())  # Ghi kh√≥a c√¥ng khai
    private_key = RSA.import_key(open("client_private_key.pem", "rb").read())  # ƒê·ªçc kh√≥a ri√™ng
    public_key = RSA.import_key(open("client_public_key.pem", "rb").read())  # ƒê·ªçc kh√≥a c√¥ng khai
    return private_key, public_key

# ==== M√£ h√≥a n·ªôi dung file b·∫±ng AES-CBC ====
def encrypt_file(file_content, session_key):
    iv = get_random_bytes(16)  # Sinh vector kh·ªüi t·∫°o IV
    cipher = AES.new(session_key, AES.MODE_CBC, iv)  # T·∫°o ƒë·ªëi t∆∞·ª£ng AES
    padded_data = file_content + b"\0" * (16 - len(file_content) % 16)  # Padding n·∫øu kh√¥ng chia h·∫øt 16 byte
    ciphertext = cipher.encrypt(padded_data)  # M√£ h√≥a
    return iv, ciphertext

# ==== K√Ω s·ªë metadata b·∫±ng SHA-512 + RSA ====
def sign_metadata(metadata, private_key):
    h = SHA512.new(json.dumps(metadata, sort_keys=True).encode('utf-8'))  # BƒÉm d·ªØ li·ªáu metadata
    signature = pkcs1_15.new(private_key).sign(h)  # K√Ω b·∫±ng RSA
    return signature

# ==== G·ª≠i d·ªØ li·ªáu d·∫°ng pickle ====
def send_data(sock, data):
    serialized = pickle.dumps(data)  # Tu·∫ßn t·ª± h√≥a
    sock.sendall(len(serialized).to_bytes(4, byteorder='big') + serialized)  # G·ª≠i k√®m ƒë·ªô d√†i tr∆∞·ªõc

# ==== Nh·∫≠n d·ªØ li·ªáu d·∫°ng pickle ====
def receive_data(sock):
    try:
        length_bytes = sock.recv(4)  # Nh·∫≠n ƒë·ªô d√†i tr∆∞·ªõc
        if not length_bytes:
            raise ValueError("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ƒë·ªô d√†i d·ªØ li·ªáu")
        total_length = int.from_bytes(length_bytes, byteorder='big')  # Chuy·ªÉn th√†nh s·ªë
        data = b""
        while len(data) < total_length:
            packet = sock.recv(4096)
            if not packet:
                raise ValueError("K·∫øt n·ªëi b·ªã ƒë√≥ng ho·∫∑c kh√¥ng nh·∫≠n ƒë∆∞·ª£c ƒë·ªß d·ªØ li·ªáu")
            data += packet  # Gh√©p t·ª´ng g√≥i l·∫°i
        return pickle.loads(data)  # Gi·∫£i tu·∫ßn t·ª± h√≥a
    except Exception as e:
        st.error(f"‚ùå L·ªói nh·∫≠n d·ªØ li·ªáu: {e}")
        raise

# ==== Ph√°t hi·ªán ƒë·ªãa ch·ªâ IP n·ªôi b·ªô c·ªßa client ====
def get_client_ip():
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            s.connect(("8.8.8.8", 80))  # K·∫øt n·ªëi t·ªõi 8.8.8.8 ƒë·ªÉ l·∫•y IP local
            return s.getsockname()[0]
    except:
        return "127.0.0.1"  # N·∫øu l·ªói th√¨ d√πng localhost

# ==== Giao di·ªán ch√≠nh v·ªõi Streamlit ====
st.set_page_config(page_title="G·ª≠i CV an to√†n", layout="centered")
st.title("üì§ To√†n b·ªô h·ªá th·ªëng g·ª≠i CV - Client")

client_ip = get_client_ip()  # L·∫•y IP m√°y g·ª≠i
st.markdown(f"üß≠ IP c·ªßa b·∫°n (t·ª± ƒë·ªông ph√°t hi·ªán): `{client_ip}`")

# Hai √¥ nh·∫≠p IP v√† c·ªïng server
col1, col2 = st.columns(2)
with col1:
    server_ip = st.text_input("üîå Nh·∫≠p IP server:", value="127.0.0.1")
with col2:
    server_port = st.number_input("üî¢ Nh·∫≠p c·ªïng m√°y ch·ªß:", value=12346)

# Upload file CV
uploaded_file = st.file_uploader("üìé Ch·ªçn file CV (PDF):", type="pdf")

# ==== Khi nh·∫•n n√∫t g·ª≠i ====
if st.button("üì® G·ª≠i CV"):
    if uploaded_file and server_ip:
        try:
            private_key, public_key = generate_or_load_keys()  # T·∫°o ho·∫∑c ƒë·ªçc kh√≥a client
            st.write(f"**üîë Kh√≥a c√¥ng khai client**: `{public_key.export_key().decode()[:50]}...`")

            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.settimeout(15.0)  # Timeout
                sock.connect((server_ip, server_port))  # K·∫øt n·ªëi ƒë·∫øn server

                # === 1. HANDSHAKE ===
                send_data(sock, {"message": "Hello!", "ip": client_ip})
                response = receive_data(sock)

                if response["message"] == "Ready!":
                    st.success("‚úÖ B·∫Øt tay th√†nh c√¥ng!")

                    # === 2. X√ÅC TH·ª∞C & TRAO KH√ìA ===
                    metadata = {
                        "filename": uploaded_file.name,
                        "timestamp": datetime.now().isoformat(),
                        "ip": client_ip
                    }
                    session_key = get_random_bytes(32)  # Sinh kh√≥a AES-256

                    try:
                        cipher_rsa = PKCS1_OAEP.new(RSA.import_key(open("server_public_key.pem").read()))
                    except FileNotFoundError:
                        st.error("‚ùó Thi·∫øu file server_public_key.pem!")
                        st.stop()

                    encrypted_session_key = cipher_rsa.encrypt(session_key)
                    sig_metadata = sign_metadata(metadata, private_key)

                    # G·ª≠i kh√≥a AES m√£ h√≥a b·∫±ng RSA + metadata + ch·ªØ k√Ω + kh√≥a c√¥ng khai
                    send_data(sock, {
                        "encrypted_session_key": base64.b64encode(encrypted_session_key).decode(),
                        "metadata": metadata,
                        "sig": base64.b64encode(sig_metadata).decode(),
                        "client_public_key": public_key.export_key().decode()
                    })

                    # === 3. M√É H√ìA FILE & G·ª¨I D·ªÆ LI·ªÜU ===
                    file_content = uploaded_file.read()
                    iv, ciphertext = encrypt_file(file_content, session_key)  # M√£ h√≥a b·∫±ng AES
                    h = SHA512.new(iv + ciphertext)
                    hash_value = h.hexdigest()
                    sig_data = sign_metadata(metadata, private_key)

                    # T·∫°o g√≥i d·ªØ li·ªáu g·ª≠i server
                    packet = {
                        "iv": base64.b64encode(iv).decode(),
                        "cipher": base64.b64encode(ciphertext).decode(),
                        "hash": hash_value,
                        "sig": base64.b64encode(sig_data).decode()
                    }

                    # Hi·ªÉn th·ªã th√¥ng tin ƒë√£ m√£ h√≥a
                    with st.expander("üìÑ Th√¥ng tin CV ƒë∆∞·ª£c g·ª≠i:"):
                        st.write(f"**Kh√≥a phi√™n (Base64)**: {base64.b64encode(session_key).decode()}")
                        st.write(f"**IV (Base64)**: {packet['iv']}")
                        st.write(f"**B·∫£n m√£ (Base64)**: {packet['cipher'][:80]}... (ƒë√£ c·∫Øt)")
                        st.write(f"**BƒÉm (SHA-512)**: {packet['hash']}")
                        st.write(f"**Ch·ªØ k√Ω (Base64)**: {packet['sig']}")
                        st.write(f"**Si√™u d·ªØ li·ªáu**: {json.dumps(metadata, indent=2)}")
                        st.write(f"**Kh√≥a c√¥ng khai client**: `{public_key.export_key().decode()[:50]}...`")

                    send_data(sock, packet)  # G·ª≠i g√≥i d·ªØ li·ªáu
                    response = receive_data(sock)  # Nh·∫≠n ph·∫£n h·ªìi t·ª´ server

                    if response["message"].startswith("ACK"):
                        st.success("üéâ CV ƒë√£ ƒë∆∞·ª£c g·ª≠i v√† x√°c nh·∫≠n th√†nh c√¥ng!")
                    else:
                        st.error(f"‚ö†Ô∏è L·ªói x√°c th·ª±c: {response['message']}")
                else:
                    st.error(f"‚ùå Handshake th·∫•t b·∫°i: {response['message']}")
        except Exception as e:
            st.error(f"üö´ L·ªói h·ªá th·ªëng: {e}")
    else:
        st.warning("üìù Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin v√† ch·ªçn file!")
